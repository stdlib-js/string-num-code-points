{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar RE_UTF16_LOW_SURROGATE = /[\\uDC00-\\uDFFF]/; // TODO: replace with stdlib pkg\nvar RE_UTF16_HIGH_SURROGATE = /[\\uD800-\\uDBFF]/; // TODO: replace with stdlib pkg\n\n\n// MAIN //\n\n/**\n* Returns the number of code points in a string.\n*\n* @param {string} str - input string\n* @throws {TypeError} must provide a string\n* @returns {NonNegativeInteger} number of code points\n*\n* @example\n* var out = numCodePoints( 'last man standing' );\n* // returns 17\n*\n* @example\n* var out = numCodePoints( 'presidential election' );\n* // returns 21\n*\n* @example\n* var out = numCodePoints( 'अनुच्छेद' );\n* // returns 8\n*/\nfunction numCodePoints( str ) {\n\tvar count;\n\tvar i;\n\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'null3B', str ) );\n\t}\n\tcount = 0;\n\n\t// Process the string one Unicode code unit at a time and count UTF-16 surrogate pairs as a single Unicode code point...\n\tfor ( i = 0; i < str.length; i++ ) {\n\t\t// Check for a high UTF-16 surrogate...\n\t\tif ( RE_UTF16_HIGH_SURROGATE.test( str[ i ] ) ) {\n\t\t\t// Check for an unpaired surrogate at the end of the input string...\n\t\t\tif ( i === str.length-1 ) {\n\t\t\t\t// We found an unpaired surrogate...\n\t\t\t\tcount += 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// Check whether the high surrogate is paired with a low surrogate...\n\t\t\tif ( RE_UTF16_LOW_SURROGATE.test( str[ i+1 ] ) ) {\n\t\t\t\t// We found a surrogate pair:\n\t\t\t\ti += 1; // bump the index to process the next code unit\n\t\t\t\tcount += 1;\n\t\t\t}\n\t\t} else {\n\t\t\tcount += 1;\n\t\t}\n\t}\n\treturn count;\n}\n\n\n// EXPORTS //\n\nexport default numCodePoints;\n"],"names":["RE_UTF16_LOW_SURROGATE","RE_UTF16_HIGH_SURROGATE","numCodePoints","str","count","i","isString","TypeError","format","length","test"],"mappings":";;2MA4BA,IAAIA,EAAyB,kBACzBC,EAA0B,kBAwB9B,SAASC,EAAeC,GACvB,IAAIC,EACAC,EAEJ,IAAMC,EAAUH,GACf,MAAM,IAAII,UAAWC,EAAQ,SAAUL,IAKxC,IAHAC,EAAQ,EAGFC,EAAI,EAAGA,EAAIF,EAAIM,OAAQJ,IAE5B,GAAKJ,EAAwBS,KAAMP,EAAKE,IAAQ,CAE/C,GAAKA,IAAMF,EAAIM,OAAO,EAAI,CAEzBL,GAAS,EACT,KACA,CAEIJ,EAAuBU,KAAMP,EAAKE,EAAE,MAExCA,GAAK,EACLD,GAAS,EAEb,MACGA,GAAS,EAGX,OAAOA,CACR"}